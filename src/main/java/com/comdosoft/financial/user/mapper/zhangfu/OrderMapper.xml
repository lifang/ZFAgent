<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.comdosoft.financial.user.mapper.zhangfu.OrderMapper">
  <!-- gch start -->
	<resultMap id="terResultMap" type="com.comdosoft.financial.user.domain.zhangfu.Terminal">
		 <id property="id" column="id" />  
         <result property="serialNum" column="serial_num" /> 
         <result property="orderId" column="order_id" /> 
	</resultMap>
	
		<resultMap id="factoryResultMap" type="com.comdosoft.financial.user.domain.zhangfu.Factory">
		 <id property="id" column="id" />  
            <result property="name" column="factory_name" /> 
	</resultMap>
	
	<resultMap id="picsResultMap" type="com.comdosoft.financial.user.domain.zhangfu.GoodsPicture">
		 <id property="id" column="pic_id" />  
         <result property="urlPath" column="url_path" /> 
	</resultMap>
	
	<resultMap id="goodBrandResultMap" type="com.comdosoft.financial.user.domain.zhangfu.GoodBrand">
		 <id property="id" column="good_brands_id" />  
         <result property="name" column="name" /> 
	</resultMap>
	
	<resultMap id="payChannelMap" type="com.comdosoft.financial.user.domain.zhangfu.PayChannel">
		 <id property="id" column="pay_channel_id" />  
            <result property="name" column="channel_name" /> 
            <result property="status" column="status" /> 
            <result property="supportCancelFlag" column="supportCancelFlag" /> 
            <result property="openingCost" column="openingCost" /> 
            <result property="needPreliminaryVerify" column="needPreliminaryVerify" /> 
            <result property="factoryId" column="factoryId" /> 
            <result property="createdUserId" column="createdUserId" /> 
            <result property="createdUserType" column="createdUserType" /> 
            <result property="createdAt" column="createdAt" /> 
            <result property="updatedAt" column="updatedAt" /> 
            <result property="openingRequirement" column="openingRequirement" /> 
            <result property="openingDatum" column="openingDatum" /> 
            <result property="openingProtocol" column="openingProtocol" /> 
	</resultMap>
	
	<resultMap id="goodsMap" type="com.comdosoft.financial.user.domain.zhangfu.Good">
		 <id property="id" column="good_id" />  
            <result property="title" column="title" /> 
            <result property="price" column="price" /> 
            <result property="purchasePrice" column="purchase_price" /> 
            <result property="retailPrice" column="retail_price" /> 
              <association property="factory" javaType="com.comdosoft.financial.user.domain.zhangfu.Factory" resultMap="factoryResultMap" />  
            <association property="goodsBrand" javaType="com.comdosoft.financial.user.domain.zhangfu.GoodBrand" resultMap="goodBrandResultMap" />  
            <collection property="picsList" ofType="com.comdosoft.financial.user.domain.zhangfu.GoodsPicture" resultMap="picsResultMap" />  
	</resultMap>
	
	<resultMap id="addressMap" type="com.comdosoft.financial.user.domain.zhangfu.CustomerAddress">
		 <id property="id" column="address_id" />  
            <result property="receiver" column="receiver" /> 
            <result property="address" column="address" /> 
            <result property="moblephone" column="moblephone" /> 
            <result property="zipCode" column="zip_code" /> 
	</resultMap>
	<resultMap id="orderPaymentMap" type="com.comdosoft.financial.user.domain.zhangfu.OrderPayment">
		 <id property="id" column="order_payment_id" />  
            <result property="payType" column="pay_type" /> 
            <result property="orderId" column="order_id" /> 
            <result property="price" column="price" /> 
	</resultMap>

	<resultMap id="orderGoodsMap" type="com.comdosoft.financial.user.domain.zhangfu.OrderGood">
		 <id property="id" column="order_good_id" />
			<result property="quantity" column="og_quantity" />
			<result property="price" column="og_price" />
			<result property="actualPrice" column="og_actual_price" />
			<result property="createdAt" column="created_at" />
			<result property="updatedAt" column="updated_at" />
			<association property="payChannel" javaType="com.comdosoft.financial.user.domain.zhangfu.PayChannel" resultMap="payChannelMap" />  
			<association property="good" javaType="com.comdosoft.financial.user.domain.zhangfu.Good" resultMap="goodsMap" />  
	</resultMap>
	<!--  -->
	<resultMap id="csOutStorageMap" type="com.comdosoft.financial.user.domain.zhangfu.CsOutStorage">
		 <id property="id" column="cs_out_id" />
			<result property="quantity" column="os_quantity" />
			<result property="status" column="os_status" />
			<!-- <result property="price" column="price" />
			<result property="actualPrice" column="actual_price" /> -->
			<result property="createdAt" column="created_at" />
			<result property="updatedAt" column="updated_at" />
	</resultMap>
	
	<resultMap id="orderMarksMap" type="com.comdosoft.financial.user.domain.zhangfu.OrderMark">
		 <id property="id" column="om_order_id" />
			<result property="createdAt" column="om_created_at" />
			<result property="content" column="om_content" />
			<association property="customer" javaType="com.comdosoft.financial.user.domain.zhangfu.Customer">  
				 <id property="id" column="om_custmoer_id" />
				 <result property="name" column="om_name" />
			</association>
	</resultMap>
	
	<resultMap id="customerMap" type="com.comdosoft.financial.user.domain.zhangfu.Customer">
		 <id property="id" column="id" />
			<result property="name" column="name" />
		
	</resultMap>
	
	<resultMap id="orderMap" type="com.comdosoft.financial.user.domain.zhangfu.Order">
		<id property="id" column="id" />
		<result property="orderNumber" column="order_number" />
		<result property="customerId" column="customer_id" />
		<result property="belongsUserId" column="belongs_user_id" />
		<result property="totalPrice" column="total_price" />
		<result property="status" column="status" />
		<result property="payedAt" column="payed_at" />
		<result property="types" column="types" />
		<result property="needInvoice" column="need_invoice" />
		<result property="actualPrice" column="actual_price" />
		<result property="frontMoney" column="front_money" />
		<result property="frontPayStatus" column="front_pay_status" />
		<result property="createdUserId" column="created_userId" />
		<result property="createdUserType" column="created_user_type" />
		<result property="processUserId" column="process_user_id" />
		<result property="processUserName" column="process_user_name" />
		<result property="createdAt" column="created_at" />
		<result property="updatedAt" column="updated_at" />
		<result property="agentOrderMarksId" column="agent_order_marks_id" />
		<result property="belongsTo" column="belongs_to" />
		<result property="invoiceType" column="invoice_type" />
		<result property="comment" column="comment" />
		<result property="invoiceInfo" column="invoice_info" />
		<result property="totalQuantity" column="total_quantity" />
		<result property="payStatus" column="pay_status"  />
		<association property="customerAddress" javaType="com.comdosoft.financial.user.domain.zhangfu.CustomerAddress" resultMap="addressMap" />  
		<association property="orderPayment" javaType="com.comdosoft.financial.user.domain.zhangfu.OrderPayment" resultMap="orderPaymentMap" />  
	    <collection property="orderGoodsList" ofType="com.comdosoft.financial.user.domain.zhangfu.OrderGood" resultMap="orderGoodsMap" />  
	    <collection property="csOutStorageList" ofType="com.comdosoft.financial.user.domain.zhangfu.CsOutStorage" resultMap="csOutStorageMap" />  
	    <collection property="orderMarkList" ofType="com.comdosoft.financial.user.domain.zhangfu.OrderMark" resultMap="orderMarksMap" />  
	</resultMap>
<!-- 批购 -->
	<select id="countWholesaleOrder" resultType="int">
		SELECT count(o.id) as count
		FROM orders o
		where o.belongs_user_id = #{customerId} and o.types = 5
		<if test="search !=null and search!=''">
		and   o.order_number like "%"#{search}"%" 
		</if>
		<if test="q !=null and q!='' and q!=2  and q!=1">
		and o.status = #{q}
		</if>
		<if test=" q==1">
		and o.status = #{q}  and  o.front_pay_status!=2
		</if>
		<if test=" q==2">
		and (o.status = #{q}  or  o.front_pay_status=#{q})
		</if>
	</select>
	<!-- 代购 -->
	<select id="countProxyOrder" resultType="int">
		SELECT count(o.id) as count
		FROM orders o
		where o.belongs_user_id = #{customerId}  
		<if test="search !=null and search!=''">
		and   o.order_number like "%"#{search}"%" 
		</if>
			<if test="p !=null and p!=''">
		and  o.types = #{p} 
		</if>
		<if test="p ==null or p==''">
			and ( o.types = 3 or o.types = 4)
		</if>
		<if test="q !=null and q!=''">
		and o.status = #{q}
		</if>
	</select>
	
	<!-- 批购 -->
	<select id="getWholesaleOrder" resultMap="orderMap" >
		SELECT
			o.id AS id,os.id as cs_out_id,
			og.id AS order_good_id,
			g.id AS good_id,
			o.order_number,
			o.created_at,
			o.status,
			g.title,g.price,g.purchase_price,
			gb. NAME,
			gb.id AS good_brands_id,
			pc. NAME AS channel_name,
			og.price as og_price,og.actual_price as og_actual_price,og.quantity as og_quantity,
			o.total_quantity ,
			os.quantity as os_quantity,os.status as os_status,
			o.actual_price,
			o.front_pay_status,
			o.front_money
		FROM
			orders o
		LEFT JOIN order_goods og ON o.id = og.order_id
		LEFT JOIN goods g ON og.good_id = g.id
		LEFT JOIN good_brands gb ON g.good_brands_id = gb.id
		LEFT JOIN pay_channels pc ON og.pay_channel_id = pc.id
		LEFT JOIN cs_out_storages os ON o.id = os.order_id  and os.`status`='1'
		WHERE
		o.belongs_user_id = #{customerId}
		and o.types = 5
		<if test="search !=null and search!=''">
		and   o.order_number like "%"#{search}"%" 
		</if>
	
		<if test="q !=null and q!='' and q!=2  and q!=1">
		and o.status = #{q}
		</if>
		<if test=" q==1">
		and (o.status = #{q}  and  o.front_pay_status!=2)
		</if>
		<if test=" q==2">
		and (o.status = #{q}  or  o.front_pay_status=#{q})
		</if>
			group BY o.id
		order by o.created_at desc
		
		LIMIT #{offset},#{rows}
	</select>
	<select id="findGoodsByWOrderId" resultMap="orderGoodsMap" >
		SELECT
			os.id as cs_out_id,
			og.id AS order_good_id,
			g.id AS good_id,
			g.title,g.price,g.purchase_price,
			gb. NAME,
			gb.id AS good_brands_id,
			pc. NAME AS channel_name,
			og.price as og_price,og.actual_price as og_actual_price,
			os.quantity as os_quantity,os.status as os_status,og.quantity as og_quantity
		FROM
		 order_goods og
		LEFT JOIN goods g ON og.good_id = g.id
		LEFT JOIN good_brands gb ON g.good_brands_id = gb.id
		LEFT JOIN pay_channels pc ON og.pay_channel_id = pc.id
		LEFT JOIN cs_out_storages os ON  os.order_id =#{param1}
		WHERE
		   og.order_id =#{param1}
		order by og.created_at desc
	</select>
	
	<!-- 代购 -->
	<select id="getProxyOrder" resultMap="orderMap" >
		SELECT
		o.id as id,
		og.id as order_good_id,
		g.id as good_id,
		 o.total_quantity,
		 g.retail_price,
		o.order_number,
			o.created_at,
				o.status,g.title,
				gb.name , 
				gb.id as good_brands_id,
				og.actual_price as og_actual_price,
		pc.name as channel_name,og.price as og_price ,	og.quantity as og_quantity , c.name,o.belongs_user_id,
		o.actual_price ,o.total_price 
		FROM	
		orders o
		LEFT JOIN order_goods og ON o.id = og.order_id
		LEFT JOIN goods g ON og.good_id = g.id
		LEFT JOIN good_brands gb ON g.good_brands_id = gb.id
		LEFT JOIN pay_channels pc ON og.pay_channel_id = pc.id
		LEFT JOIN customers c ON o.customer_id = c.id
		WHERE
		o.belongs_user_id = #{customerId}
	
		<if test="search !=null and search!=''">
		and   o.order_number like "%"#{search}"%" 
		</if>
		<if test="p !=null and p!=''">
		and  o.types = #{p} 
		</if>
		<if test="p ==null or p==''">
			and ( o.types = 3 or o.types = 4)
		</if>
		<if test="q !=null and q!=''">
		and o.status = #{q}
		</if>
			group by o.id
		order by o.created_at desc
		LIMIT #{offset},#{rows}
	</select>
	
	<select id="findGoodsByPOrderId" resultMap="orderGoodsMap" >
		SELECT
		og.id as order_good_id,
		g.id as good_id, 
		g.retail_price,og.actual_price as og_actual_price,
		g.title,gb.name , gb.id as good_brands_id,
		pc.name as channel_name,og.price as og_price ,	og.quantity as og_quantity 
		FROM	
	      order_goods og
		LEFT JOIN goods g ON og.good_id = g.id
		LEFT JOIN good_brands gb ON g.good_brands_id = gb.id
		LEFT JOIN pay_channels pc ON og.pay_channel_id = pc.id
		WHERE
		   og.order_id =#{param1}
		order by og.created_at desc
	</select>
	<!-- 查询此订单的原有库存 -->
	<select id="findOrderById"  resultType="map" >
	 	SELECT
			og.good_id, 	sum(og.quantity) as quantity
		FROM
			orders t
		right JOIN order_goods og ON og.order_id = t.id
		WHERE t.id=#{id}
	</select>
	<!-- 归还库存 -->
	<update id="update_goods_stock" >
     UPDATE goods
	SET quantity = quantity + #{param2},updated_at= NOW()
	WHERE
		id = #{param1}
    </update>
	<!--   1为定金付款   2 为余额支付  3  付款金额= 剩下的钱  -->
	<update id="paySuccessUpdateOrder" >
     UPDATE orders
     <if test="param3 ==1">
			 SET front_pay_status = #{param2},
		</if>
		<if test="param3 ==2">
			 SET status = #{param2},
		</if>
		<if test="param3 ==3">
			 SET status = #{param2},pay_status=2,
		</if>
	updated_at= NOW()
	WHERE
		id = #{param1}
    </update>
    
 <select id="countOrderPaymentByNum" resultType="int" >
	SELECT
		count(p.id) AS count
	FROM
		order_payments p
	WHERE
		p.order_id = #{param1}
	</select>
	
	<select id="getOutStorageByOrderId" resultMap="csOutStorageMap" >
		select * from cs_out_storages c where c.order_id=  #{param1}
	</select>
	
	<select id="findCustomerById" resultMap="customerMap" >
		SELECT
		 *
		FROM	
		 customers  
		WHERE
		id = #{id}
	</select>
	
	<select id="findPicByGoodId" resultMap="picsResultMap" >
		SELECT
		gp.id as pic_id,
		gp.url_path 
		FROM	
		goods_pictures gp 
		WHERE
		 gp.good_id = #{param1}
		order by gp.id desc
	</select>
	
	  <!--  批购 详情 -->
	<select id="getWholesaleById" resultMap="orderMap">
		SELECT
		o.id as id,og.id as order_good_id,g.id as good_id,o.total_quantity,g.price,g.purchase_price,
		o.order_number,	o.created_at,	o.status,o.pay_status,o.invoice_type,o.need_invoice,
		 g.title,gb.name , gb.id as good_brands_id,o.comment,
		pc.name as channel_name,og.price as og_price ,	og.quantity as og_quantity ,o.invoice_info,f.`name` as factory_name,
		o.actual_price ,o.total_price, om.customer_id as om_customer_id,om.order_id as om_order_id,
		ca.receiver ,ca.address,ca.moblephone,om.content as om_content,om.created_at as om_create_at,c.`name` as om_name ,
		 os.status as os_status,os.quantity as os_quantity,og.actual_price as og_actual_price,
		o.front_pay_status,
		o.front_money,op.pay_type
		FROM	
		orders o
		LEFT JOIN order_goods og ON o.id = og.order_id
		LEFT JOIN goods g ON og.good_id = g.id
		LEFT JOIN factories f ON g.factory_id = f.id
 		LEFT JOIN good_brands gb ON g.good_brands_id = gb.id
		LEFT JOIN pay_channels pc ON og.pay_channel_id = pc.id
		LEFT JOIN customer_addresses ca on o.customer_address_id = ca.id 
		LEFT JOIN order_marks om on o.id = om.order_id 
		LEFT JOIN customers c on om.customer_id = c.id
		LEFT JOIN cs_out_storages os ON o.id = os.order_id   and os.`status`='1'
		LEFT JOIN order_payments op on o.id = op.order_id
		WHERE
		o.id = #{param1}
		and o.types = 5
		group BY os.id
	</select>
	<!-- 代购  详情 -->
	<select id="getProxyById" resultMap="orderMap">
		SELECT
		o.id as id,og.id as order_good_id,g.id as good_id,o.total_quantity,g.retail_price,
		o.order_number,	o.created_at,	o.status,o.pay_status,o.invoice_type,
		g.title,gb.name , gb.id as good_brands_id,o.comment ,o.types,os.quantity as os_quantity,os.status as os_status,og.actual_price as og_actual_price,
		pc.name as channel_name,og.price as og_price ,	og.quantity as og_quantity ,o.invoice_info,op.pay_type,o.belongs_user_id,f.`name` as factory_name,
		o.actual_price ,o.total_price,om.customer_id as om_customer_id,om.order_id as om_order_id,
		ca.receiver ,ca.address,ca.moblephone,om.content as om_content,om.created_at as om_create_at,c.`name` as om_name 
		FROM	
		orders o
		LEFT JOIN order_goods og ON o.id = og.order_id
		LEFT JOIN goods g ON og.good_id = g.id
		LEFT JOIN factories f ON g.factory_id = f.id
		LEFT JOIN good_brands gb ON g.good_brands_id = gb.id
		LEFT JOIN pay_channels pc ON og.pay_channel_id = pc.id
		LEFT JOIN customer_addresses ca on o.customer_address_id = ca.id 
		LEFT JOIN order_marks om on o.id = om.order_id 
		LEFT JOIN customers c on om.customer_id = c.id
	    LEFT JOIN cs_out_storages os ON o.id = os.order_id and os.`status`='1'
		LEFT JOIN order_payments op on o.id = op.order_id
		WHERE
		o.id = #{param1}
		and  ( o.types = 3 or o.types = 4)
		group BY os.id
	</select>
	<update id="cancelMyOrder" parameterType="com.comdosoft.financial.user.domain.zhangfu.Order">
        UPDATE orders
			SET STATUS = #{orderStatus.code},	updated_at = NOW()
		WHERE
			id = #{id}
    </update>
    
    <insert id="comment" useGeneratedKeys="true" keyProperty="id" parameterType="com.comdosoft.financial.user.domain.zhangfu.GoodComment">
		INSERT into good_comments 
		(score,content,customer_id,good_id,order_id,created_at)
		VALUES(#{score},#{content},#{customerId},#{good_id},#{order_id},NOW())
  </insert>
  
    <insert id="insertOrderPayment" useGeneratedKeys="true" keyProperty="id" parameterType="com.comdosoft.financial.user.domain.zhangfu.OrderPayment">
		INSERT INTO order_payments (order_id,price,pay_type,created_user_id,created_user_type,created_at)
		VALUES(#{orderId},#{price},#{payType},#{createdUserId},#{createdUserType},NOW())
  </insert>
    
     <select id="findTraceById" resultType="map" >
		SELECT
			crm.content AS marks_content,
			crm.created_at,
			c.`name` AS marks_person
		FROM
			  order_marks crm 
		LEFT JOIN customers c ON crm.customer_id = c.id
		WHERE
		crm.order_id = #{id}
	</select>
	
     <select id="getTerminsla" resultMap="terResultMap" >
		select  t.serial_num from terminals t where t.order_id=#{param1}
	</select>
	
     <select id="getOrderPayByOrderId" resultMap="orderPaymentMap" >
		select * from order_payments op where op.order_id=#{param1}
	</select>
	
	 <select id="findOrderByNumber"  resultMap="orderMap">
	 	SELECT o.id,o.`status`,o.total_price,o.actual_price,o.front_money
	 	 from orders o where o.order_number =#{param1} limit 1
	</select>
    
	<!-- gch end -->
	
	<!-- jwb -->
	 <insert id="addOrder" useGeneratedKeys="true" keyProperty="id" parameterType="com.comdosoft.financial.user.domain.query.OrderReq">
		INSERT into orders 
		(order_number,customer_id,total_price,status,types,
		customer_address_id,need_invoice,invoice_type,
		invoice_info,actual_price,created_at,updated_at,
		comment,total_quantity,front_money,created_user_id,belongs_user_Id,belongs_to)
		VALUES(#{ordernumber},#{customerId},#{totalprice},1,#{orderType},
		#{addressId},#{isNeedInvoice},#{invoiceType},#{invoiceInfo},
		#{totalprice},NOW(),NOW(),#{comment},#{totalcount},#{front_money},#{creatid},#{belongId},#{belongto})
  </insert>
  
  <insert id="addOrderGood"  parameterType="com.comdosoft.financial.user.domain.query.OrderReq">
		INSERT into order_goods 
		(good_id,pay_channel_id,quantity,price,actual_price,
		order_id,created_at,updated_at)
		VALUES(#{goodId},#{paychannelId},#{quantity},
		#{price},#{retailPrice},#{id},NOW(),NOW())
  </insert>
  
  
  <select id="getGoodInfo" resultType="map" parameterType="com.comdosoft.financial.user.domain.query.OrderReq">
        SELECT  g.id as goodid,pc.id as paychanelid ,g.lease_deposit,ifnull(g.belongs_to,0) belongs_to,
        g.purchase_price,g.floor_price,g.floor_purchase_quantity,g.quantity as count,
        g.price,g.retail_price,pc.opening_cost
		from goods_pay_channels gpc
		LEFT JOIN goods g on g.id=gpc.good_id
		LEFT JOIN pay_channels pc on pc.id=gpc.pay_channel_id
		where gpc.good_id=#{goodId} and gpc.pay_channel_id=#{paychannelId}
  </select>
  
  <insert id="payFinish"   parameterType="com.comdosoft.financial.user.domain.query.OrderReq">
		INSERT into order_payments(order_id,price,pay_type,created_at)  
		VALUES(#{id},#{price},#{type},NOW())
  </insert>
  
  <select id="getOrderByMumber"  resultType="map" parameterType="com.comdosoft.financial.user.domain.query.OrderReq">
		SELECT id,total_price from orders where order_number=#{ordernumber} and status=1
  </select>
  
  <update id="upOrder"   parameterType="com.comdosoft.financial.user.domain.query.OrderReq">
       UPDATE orders set status=2 where id=#{id}
  </update>
  
</mapper>
